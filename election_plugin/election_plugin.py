# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Fantastic_Group_Project
                                 A QGIS plugin
 Election prediction plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-20
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Fantastic Four .group
        email                : notYet@bruh.mp
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtWidgets import QFileDialog, QToolBar, QMessageBox
from os import listdir, getcwd
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon

from datetime import datetime
from PyQt5.QtWidgets import QAction
from qgis.PyQt.QtCore import QVariant
from qgis.gui import *
# Initialize Qt resources from file resources.py
from .resources import *
from operator import itemgetter
import csv
from qgis.gui import *
from PyQt5.QtCore import *
from random import randrange

from .handler import *
from .algorithms import *
import copy
import random
from .symbolv2 import *
# import .handler

# Import the code for the DockWidget
from .election_plugin_dockwidget import Fantastic_Group_ProjectDockWidget
import os.path

from PyQt5.QtCore import QCoreApplication, QVariant
from PyQt5.QtGui import QColor
from qgis.core import *
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsWkbTypes,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterField,
                       QgsSimpleFillSymbolLayer,
                       QgsRendererCategory,
                       QgsCategorizedSymbolRenderer,
                       # setRenderer,
                       # QgsSymbol.changeSymbolLayer(): argument 2 has unexpected type 'sip.wrappertype'
                       QgsVectorLayerJoinInfo,
                       QgsVectorLayer,
                       QgsField,
                       QgsSymbol,
                       QgsRendererRange,
                       QgsGraduatedSymbolRenderer,
                       QgsProject,
                       QgsDistanceArea,
                       QgsProcessingUtils)
import processing
import tempfile
from qgis.utils import iface
from osgeo import ogr
import os


class Fantastic_Group_Project:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):

        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.runrunrun = True

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        self.resetRoot = None
        self.OGLIST = None

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Fantastic_Group_Project_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Election_plugin')
        self.list_no_2 = None
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Fantastic_Group_Project')
        self.toolbar.setObjectName(u'Fantastic_Group_Project')

        self.canvasVar = None
        self.outputToTxt = False
        self.weight_field = None

        self.pluginIsActive = False
        self.dockwidget = None
        self.work_path = getcwd()
        self.election_field_provided = False
        self.rad_bias_provided = False

        self.attrName = "elec_resul"

        self.currentLayer = None
        self.ID = None
        self.data = None
        self.selected = []

        self.inputPolygon_layer = None
        self.inputData_layer = None
        self.state = 1;
        self.filter_value = None
        self.possibleFitlers = ["Bottom up", "Top down", "Random", "Random with bias", "Simulation with bias (100 iterations)"]



    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        return QCoreApplication.translate('Fantastic_Group_Project', message)

    def output_report_file(self):
        fileName,_ = QFileDialog.getSaveFileName(self.dockwidget,"Select output to save", "output.txt","(*.txt)")


        if fileName:
            self.dockwidget.outputfile_input.setText(fileName)

    def selectShapeFile(self):
         """displays open file dialog to select shapefile input file"""
         fileName,_ = QFileDialog.getOpenFileName(self.dockwidget,"Select Shapefile with polygons", "\"","(*.shp)")


         if fileName:
             self.dockwidget.shapefileInput.setText(fileName)


    def selectCSVFile(self):
         """displays open file dialog to select shapefile input file"""
         fileName,_ = QFileDialog.getOpenFileName(self.dockwidget,"Select CSV file with needed attributes", "\"","(*.csv)")



         if fileName:
             self.dockwidget.csvfileInput.setText(fileName)



    def submit_fields_clicked(self):
        """ Load and joins the fields"""
        shpField = self.dockwidget.shape_join_drop.currentText()
        csvField = self.dockwidget.csv_join_drop.currentText()
        election_results_field = self.dockwidget.election_results_drop.currentText()
        weight_field = self.dockwidget.weight_drop.currentText()
        rad_bias_field = self.dockwidget.rand_bias_drop.currentText()


        self.dockwidget.enable_seltool.setEnabled(True)
        self.dockwidget.generate_report.setEnabled(True)
        self.dockwidget.output_checkBox.setEnabled(True)


        filter_drop_field = self.dockwidget.filter_drop.currentText()

        self.filter_value = filter_drop_field
        now = datetime.now()
        time = now.strftime("%H_%M_%S")
        temp =  "\\join_shp_" +time+".shp"
        self.ID = shpField
        self.weight_field = weight_field
        output_join = tempfile.gettempdir()+temp



        try:
            processing.run('qgis:joinattributestable', {
                'INPUT': self.inputPolygon_layer,
                'FIELD': shpField,
                'INPUT_2': self.inputData_layer,

                'FIELD_2': csvField,
                'FIELDS_TO_COPY': "",
                'METHOD': 1,
                'DISCARD_NONMATCHING': 'True',
                'OUTPUT': output_join})
            joined = QgsVectorLayer(output_join, 'Elections', 'ogr')

            self.currentLayer = joined

            # if(joined.dataProvider().capabilities and QgsVectorDataProvider.DeleteFeatures):

            res = joined.dataProvider().addAttributes(
                [QgsField(self.attrName, QVariant.Int)]
            )

            # stra = str(type(res))
            # self.dockwidget.report_label.setText(stra)
            joined.updateFields()

            # feature['user Provided'] = 10
            QgsProject.instance().addMapLayers([joined])


            # joined.updateFeature(features)
            # QgsProject.instance().addMapLayers([joined])
            #Create a list of dicts objects with the required fields
            listToPopulate = []
            count = 0
            if(election_results_field != "None" and rad_bias_field !="None"):
                self.election_field_provided = True
                self.rad_bias_provided = True
                for f in joined.getFeatures():
                    count += float(f[weight_field])

                    newDict = {
                    "fID": f.id(),
                    "ID" : f[shpField], "elec_result": int(f[election_results_field]),
                    "pop_weight": float(f[weight_field]),
                    "pre_results": int(f[election_results_field]),
                    "rad_bias": float(f[rad_bias_field])
                    }
                    listToPopulate.append(newDict)
            elif(election_results_field == "None" and rad_bias_field != "None"):
                self.rad_bias_provided = True


                for f in joined.getFeatures():
                    count += float(f[weight_field])
                    newDict = {
                    "fID": f.id(),
                    "ID" : f[shpField], "elec_result": -1,
                    "pop_weight":float(f[weight_field]),

                    "rad_bias": float(f[rad_bias_field])
                    }
                    listToPopulate.append(newDict)
            elif(election_results_field != "None"  and rad_bias_field == "None"):
                self.election_field_provided = True

                for f in joined.getFeatures():
                    count += float(f[weight_field])
                    newDict = {
                    "fID": f.id(),
                    "ID" : f[shpField], "elec_result": int(f[election_results_field]),
                    "pop_weight": float(f[weight_field]),
                    "pre_results": int(f[election_results_field]),
                    "rad_bias": 50
                    }
                listToPopulate.append(newDict)
            else:
                for f in joined.getFeatures():
                    count += float(f[weight_field])
                    weight = float(f[weight_field])
                    newDict = {
                    "fID": f.id(),
                    "ID" : f[shpField], "elec_result": -1,
                    "pop_weight":weight, "rad_bias": 50
                    }

                    listToPopulate.append(newDict)

            # self.dockwidget.report_label.setText("before-Populate Data")
            # filter_list = [i for i in listToPopulate if not (i['elec_result'] == 2)]
            filter_list = listToPopulate

            self.OGLIST = copy.deepcopy(listToPopulate)
            # [self.dockwidget.report_label.setText(i['elec_result']) for i in listToPopulate]

            self.threshold = count/2

            self.list_no_2 = filter_list

            if filter_list:
                newlist = sorted(listToPopulate, key=itemgetter('ID'))

                mid = int(len(newlist)/2)
                root = handler(newlist[mid])
                root2 = handler(newlist[mid])
                root2 = self.balancedData(root2, newlist)
                root = self.balancedData(root, newlist)
                self.data = root
                self.resetRoot = root2
                # self.debug_test_all_record(newlist)

            # QgsProject.instance().addMapLayers([self.joined])
            stra = "\"" + str(joined) + "\""

            self.updated_attribute_table(self.currentLayer)

            # canvas = QgsMapCanvas()
            # canvas.setCanvasColor(Qt.black)
            # canvas.enableAntiAliasing(True)
            # QgsProject.instance().addMapLayer(self.currentLayer)
            # canvas.setExtent(self.currentLayer.extent())
            #
            #
            # canvas.setLayers([self.currentLayer])
            #
            # self.canvasVar = canvas
            #
            # #
            # self.setMouseTracking(True)
            # tool = PointTool(iface.mapCanvas(), iface)
            # iface.mapCanvas().setMapTool(tool)
            #
            # # seltool = SelectTool(iface.mapCanvas())
            # # iface.mapCanvas().setMapTool(seltool)

            self.colorChange(self.currentLayer)







        except Exception as e:
             QMessageBox.information(self.dockwidget, 'Operation failed', 'Could not read data from files provided: '+ str(e.__class__) + ': ' + str(e), QMessageBox.Ok)











    def submit_outcomes_clicked(self):



        self.dockwidget.report_label.setText('Submit Outcomes Clicked')



        open("C:/Users/Jhonny/Desktop/Test_sub.txt", 'w').close()
        text_file = open("C:/Users/Jhonny/Desktop/Test_sub.txt", "a")
        # text_file.write("Selected: \n")
        # for q in l.selectedFeatures():
        #
        #     text_file.write("fid: {} stfid2 {}\n".format(q.id(), q["STFID2"]))

        self.updated_root_selected_Feature()
        # layer, updated_attribute_table = False):
        self.updated_attribute_table(self.iface.activeLayer())
        self.colorChange(self.iface.activeLayer(), updated_attribute_table = True)
        mc = self.iface.mapCanvas()

        for layer in mc.layers():
            if layer.type() == layer.VectorLayer:
                layer.removeSelection()

        mc.refresh()

        #
        # self.dockwidget.report_label.setText('Button Pressed')


    def updated_root_selected_Feature(self):
        l = self.iface.activeLayer()
        text_file = open("C:/Users/Jhonny/Desktop/Test_sub.txt", "a")
        text_file.write("Selected: \n")

        for q in l.selectedFeatures():
            now = datetime.now()
            time = now.strftime("%H_%M_%S_%f")
            t = "time: "+time
            id = q[self.ID]
            text_file.write("Time: "+time)
            text_file.write(" fid: {} stfid2 {} \n".format(q.id(), q["STFID2"]))

            dict = self.data.findDataWithID(id)[1]
            dict["elec_result"] = self.state
            # text_file.write("Dict elec_resul: {}".format(dict['elec_result']))
            self.data.updateData(dict)

        text_file.close()
        self.dockwidget.report_label.setText('Finisehd Updating root')

    def debug_test_all_record(self, newlist):
        testids = [k["ID"] for k in newlist]

        b = "\n"
        val = "Pass "
        i = 0
        for testID in testids:
            i+=1
            a = self.data.findDataWithID(testID)[0]
            b+= testID + ": " + str(a) + "\n"
            if not a:
                val = "Fail at "+testID
        val2="\nChecked: {} records".format(i)
        val+=val2
        val +=b
        self.dockwidget.report_label.setText(val)



    def loadfiles(self):
        """Reads shapefile and csv data into memory"""
        shpname = self.dockwidget.shapefileInput.text()
        uri = self.dockwidget.csvfileInput.text()
        uri = "file:///"+uri+"?delimiter=,"
        try:
            layer = QgsVectorLayer(shpname, 'Polygon Layer', 'ogr')
            self.inputPolygon_layer = layer
            dataLayer = QgsVectorLayer(uri, 'CSV file', 'delimitedtext')
            self.inputData_layer = dataLayer
            shapefile_fieldName = [field.name() for field in layer.fields()]
            self.dockwidget.shape_join_drop.clear()
            self.dockwidget.shape_join_drop.addItems(shapefile_fieldName)

            csvfile_fieldName = [field.name() for field in dataLayer.fields()]
            self.dockwidget.csv_join_drop.clear()
            self.dockwidget.csv_join_drop.addItems(csvfile_fieldName)

            self.dockwidget.weight_drop.clear()
            self.dockwidget.weight_drop.addItems(csvfile_fieldName)

            self.dockwidget.filter_drop.clear()
            self.dockwidget.filter_drop.addItems(self.possibleFitlers)

            csvfile_fieldName.insert(0, "None")
            self.dockwidget.rand_bias_drop.clear()
            self.dockwidget.rand_bias_drop.addItems(csvfile_fieldName)

            self.dockwidget.election_results_drop.clear()
            self.dockwidget.election_results_drop.addItems(csvfile_fieldName)







        except Exception as e:
             QMessageBox.information(self.dockwidget, 'Operation failed', 'Could not read data from files provided: '+ str(e.__class__) + ': ' + str(e), QMessageBox.Ok)



    # # self.dockwidget.report_label.setText(str)
    def balancedData(self, root, list):
        """Does something"""
        root = handler.sortedlistToBST(root,list)
        return root
    def updated_attribute_table(self, layer):
        features = layer.getFeatures()
        pr = layer.dataProvider()
        layer.startEditing()

        for feature in features:
            bData = self.data.findDataWithID(feature[self.ID])
            if(not bData[0]):
                result_to_update = 2
            else:
                result_to_update = bData[1]["elec_result"]
            pr.changeAttributeValues({feature.id() : {pr.fieldNameMap()[self.attrName] : result_to_update}})

        self.iface.vectorLayerTools().stopEditing(layer,False)


# "Bottom up", "Top down", "Random", "Random with bias", "Simulation with bias (100 iterations)"

    def colorChange(self, layer, updated_attribute_table = False):
        # layer = iface.acitiveLayer() # load the layer as you want

        # define the lookup >> value : (color, label)

        if(updated_attribute_table):
            self.updated_attribute_table(layer)

        colors = {1: ('red', 'Won'),
                0: ('light grey', 'Lost'),
                -1: ('white', 'Undecided')}
        # create a category for each item in your layer
        categories = []
        for unique_id, (color, label) in colors.items():
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol.setColor(QColor(color))
            category = QgsRendererCategory(unique_id, symbol, label)
            categories.append(category)

        # create the renderer and assign it to the layer
        expression = self.attrName
        renderer = QgsCategorizedSymbolRenderer(expression, categories)

        # for cat in renderer.categories():
        #     print("{}: {} :: {}".format(cat.value(), cat.label(), cat.symbol()))
        renderer = QgsCategorizedSymbolRenderer(expression, categories)
        layer.setRenderer(renderer)
        layer.triggerRepaint()

    def generate_report_clicked(self):

        # Debug
        self.iface.actionPan().trigger()


        now = datetime.now()
        time = now.strftime("%I_%M_%S_%f")


        filter_var = algorithms()
        resultsDict = None

        # newlist = sorted(self.list_no_2, key=itemgetter('ID'))
        #
        # mid = int(len(newlist)/2)
        # root = handler(newlist[mid])
        # root = self.balancedData(root, newlist)
        # self.data = root


        list_no_2 = copy.deepcopy(self.list_no_2)

        index = self.possibleFitlers.index(self.filter_value)
        ab = str(index)+" "+time

        count = result = elecWon = updated_vals = wonCount = lostCount = averageVotes = None
        strDest = "C:/Users/Jhonny/Desktop/Test data/output.txt"
        resultsDict = {
                0: filter_var.BottomUp(copy.deepcopy(self.list_no_2), self.threshold),
                1: filter_var.TopDown(copy.deepcopy(self.list_no_2), self.threshold),
                2: filter_var.RandomElection(copy.deepcopy(self.list_no_2), self.threshold),
                3: filter_var.BiasRandomElection(copy.deepcopy(self.list_no_2), self.threshold),
                4: filter_var.SimulatedElectionV2(copy.deepcopy(self.list_no_2), self.threshold)

        }


        if(index!=4):
            result = resultsDict[index][0]
            elecWon = resultsDict[index][1]
            count = resultsDict[index][2]
            updated_vals = resultsDict[index][3]
        else:
            wonCount, lostCount, averageVotes, updated_vals = resultsDict[index]


        # if index == 0:
        #
        #     result, elecWon, count, updated_vals = filter_var.BottomUp(list_no_2, self.threshold)
        #     stra = "0:"+ str(result)+" " +str(elecWon)
        #     self.dockwidget.report_label.setText(stra)
        # elif index ==1 :
        #     result, elecWon, count,updated_vals = filter_var.TopDown(list_no_2, self.threshold)
        #     stra = "1: "+ str(result)+" " +str(elecWon)
        #     self.dockwidget.report_label.setText(stra)
        # elif index == 2:
        #     result, elecWon, count, updated_vals = filter_var.RandomElection(list_no_2, self.threshold)
        #     stra = "2: "+str(result)+" " +str(elecWon)
        #     self.dockwidget.report_label.setText(stra)
        # elif index ==3:
        #     result, elecWon,count, updated_vals = filter_var.BiasRandomElection(list_no_2, self.threshold)
        #     stra = "3: "+ str(result)+" " +str(elecWon)
        #     self.dockwidget.report_label.setText(stra)
        # elif index == 4:
        #     result, elecWon, updated_vals = filter_var.SimulatedElection(list_no_2, self.threshold)
        #     stra = "4: "+ str(result)+" " +str(elecWon)
        #     self.dockwidget.report_label.setText(stra)

        newlist = sorted(updated_vals, key=itemgetter('ID'))

        mid = int(len(newlist)/2)
        root = handler(newlist[mid])
        root = self.balancedData(root, newlist)
        # self.dockwidget.outputfile_input.setText(ab)
        self.data = root



        self.updated_attribute_table(self.currentLayer)
        self.colorChange(self.currentLayer)
        # def str_report_label(self, result =None, elecWon = None, dictlist = None, count = None, index = None, wonCount = None, lostCount = None, averageVotes = None):
        if(index!=4):
            self.str_report_label(result = result, elecWon = elecWon, dictlist = updated_vals, count = count, index = index)
        else:
            self.str_report_label(wonCount = wonCount, lostCount = lostCount, index = index, dictlist = updated_vals, averageVotes = averageVotes)
        if(self.outputToTxt):
            output_path = self.dockwidget.outputfile_input.text()
            open(output_path, 'w').close()
            # self.dockwidget.outputfile_input.setText("Before")
            self.export_txt(resultsDict, output_path)











        # self.dockwidget.report_label.setText("out")

        # ToDo: Add the method for changing symbology provided by ruiyu.


    def export_txt(self, resultsDict, output_path):
        text_file = open(output_path, "a")
        text_file.write("Minimum threshold to win is {}. Calulated from column \"{}\"\n".format(self.threshold, self.weight_field))
        # self.dockwidget.outputfile_input.setText("IN")
        for index in range(0, 5):

            count = result = elecWon = updated_vals = None

            # output_path = self.dockwidget.outputfile_input.setText(str(index))



            if(index!=4):
                result = resultsDict[index][0]
                elecWon = resultsDict[index][1]
                count = resultsDict[index][2]
                updated_vals = resultsDict[index][3]
            else:
                wonCount, lostCount, averageVotes, updated_vals = resultsDict[index]



            text_file.write("For \"{}\" filter: \n".format(self.possibleFitlers[index]))
            if(index!=4):
                text_file.write("\tYou have secured {} votes. That is {} {} than the minimum threshold\n".format(count, abs(count-self.threshold), 'more' if count>self.threshold else 'lower'))
                # text_file.write("\tYou have secured {} {} than the threshold.\n".format(abs(count-self.threshold), 'more' if count>self.threshold else 'lower'))
                text_file.write("\tYou have {} the election\n".format('won' if result else 'lost'))
                text_file.write("\tNumber of polygons won: {}\n".format(elecWon))
                l = len(updated_vals)
                text_file.write("\tNumber of polygons lost: {}\n\n".format(l-elecWon))
            else:
                stra = ""
                stra+= "\tYou have won {} of the 100 simulations\n".format(wonCount)
                stra+= "\tYou have lost {} of the 100 simulations\n".format(lostCount)

                stra+= "\tYou have secured an average of {} votes\n".format(averageVotes)
                text_file.write(stra)

        text_file.close()
        # output_path = self.dockwidget.outputfile_input.setText("Done")




# self.str_report_label(wonCount = wonCount, lostCount = lostCount, index = index, dictlist = updated_vals, averageVotes = averageVotes)
    def str_report_label(self, result =None, elecWon = None, dictlist = None, count = None, index = None, wonCount = None, lostCount = None, averageVotes = None):
        stra = ""
        if(index!=4):

            if(result):
                stra+="Won!\n"
            else:
                stra+="Lost!\n"

            stra+="Number of Polygons Won: "+ str(elecWon)+"\n"
            l = len(dictlist)
            stra+="Number of Polygons Lost: "+ str(l-elecWon)+"\n"

            if(not result and index!=4):
                stra += "Minimum threshold to win: "+str(self.threshold) +"\n"
                stra += "Reached win-count: "+str(count)  +"\n"




        else:
            stra += 'Won!\n' if wonCount >= lostCount else 'Lost\n'

            stra+= "You have won {} of the 100 simulations\n".format(wonCount)
            stra+= "You have lost {} of the 100 simulations\n".format(lostCount)

            stra+= "You have secured an average of {} votes\n".format(averageVotes)

        self.dockwidget.report_label.setText(stra)
        return stra



    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def reset_button_clicked(self):

        filter_list = copy.deepcopy(self.OGLIST)

        if filter_list:
            newlist = sorted(filter_list, key=itemgetter('ID'))

            mid = int(len(newlist)/2)
            root = handler(newlist[mid])
            # root2 = handler(newlist[mid])
            # root2 = self.balancedData(root2, newlist)
            root = self.balancedData(root, newlist)
            self.data = root
            # self.resetRoot = root2


        self.colorChange(self.iface.activeLayer(), updated_attribute_table = True)
        self.dockwidget.report_label.setText("Done Resetting")


    def enable_seltool_state_changed(self):

        if(self.dockwidget.enable_seltool.isChecked()):
            self.dockwidget.won_radio.setEnabled(True)
            self.dockwidget.undecided_radio.setEnabled(True)
            self.dockwidget.lost_radio.setEnabled(True)
            self.dockwidget.submit_outcomes.setEnabled(True)
            self.dockwidget.reset_button.setEnabled(True)
            self.dockwidget.report_label.setText("Select Tool Running")
            open("C:/Users/Jhonny/Desktop/Test_poi.txt", 'w').close()
            tool = PointTool(iface.mapCanvas(), iface, self.selected)
            iface.mapCanvas().setMapTool(tool)




        else:
            self.iface.actionPan().trigger()
            self.dockwidget.won_radio.setEnabled(False)
            self.dockwidget.undecided_radio.setEnabled(False)
            self.dockwidget.lost_radio.setEnabled(False)
            self.dockwidget.submit_outcomes.setEnabled(False)
            self.dockwidget.reset_button.setEnabled(False)



    def won_radio_toggled(self):
        self.state = 1
        self.dockwidget.report_label.setText("Won!")

    def lost_radio_toggled(self):
        self.state = 0
        self.dockwidget.report_label.setText("Lost!")
    def undecided_radio_toggled(self):
        self.state = -1
        self.dockwidget.report_label.setText("Undecided!")


    def output_checkbox_state_changed(self):
        if(self.dockwidget.output_checkBox.isChecked()):
            self.dockwidget.label_6.setEnabled(True)
            self.dockwidget.outputfile_input.setEnabled(True)
            self.dockwidget.toolButton_3.setEnabled(True)
            self.outputToTxt = True



        else:
            self.dockwidget.label_6.setEnabled(False)
            self.dockwidget.outputfile_input.setEnabled(False)
            self.dockwidget.toolButton_3.setEnabled(False)
            self.outputToTxt = False



    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/election_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Predict an Election'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING Fantastic_Group_Project"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""



        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Election_plugin'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = Fantastic_Group_ProjectDockWidget()
                self.dockwidget.report_label.clear()
                self.dockwidget.toolButton.clicked.connect(self.selectShapeFile)
                self.dockwidget.toolButton_2.clicked.connect(self.selectCSVFile)
                self.dockwidget.pushButton.clicked.connect(self.loadfiles)
                self.dockwidget.submit_fields.clicked.connect(self.submit_fields_clicked)
                self.dockwidget.submit_outcomes.clicked.connect(self.submit_outcomes_clicked)

                self.dockwidget.won_radio.toggled.connect(self.won_radio_toggled)
                self.dockwidget.lost_radio.toggled.connect(self.lost_radio_toggled)
                self.dockwidget.undecided_radio.toggled.connect(self.undecided_radio_toggled)
                self.dockwidget.generate_report.clicked.connect(self.generate_report_clicked)

                self.dockwidget.enable_seltool.stateChanged.connect(self.enable_seltool_state_changed)
                self.dockwidget.output_checkBox.stateChanged.connect(self.output_checkbox_state_changed)

                self.dockwidget.reset_button.clicked.connect(self.reset_button_clicked)

                self.dockwidget.toolButton_3.clicked.connect(self.output_report_file)





            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
